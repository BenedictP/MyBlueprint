plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id "com.starter.easylauncher" version "3.9.0"
    id 'kotlin-parcelize'
    id 'shot'
}

apply from: '../dependencies.gradle'

android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildToolsVersion

    defaultConfig {
        applicationId "io.benedictp.myblueprint"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdkVersion
        versionCode versions.versionCode
        versionName versions.versionName

        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner "com.karumi.shot.ShotTestRunner"

        resValue 'string', 'app_name', 'MyBlueprint'
    }
    signingConfigs {
        release {
            Properties properties = new Properties()
            File keyStoreProperties = project.rootProject.file('keystore.properties')
            if (keyStoreProperties.exists()) {
                properties.load(keyStoreProperties.newDataInputStream())
            }
            String storePasswordString = System.getenv("BITRISEIO_ANDROID_KEYSTORE_PASSWORD") as String ?: properties['storePassword']
            String keyAliasString = System.getenv("BITRISEIO_ANDROID_KEYSTORE_ALIAS") as String ?: properties['keyAlias']
            String keyPasswordString = System.getenv("BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD") as String ?: properties['keyPassword']
            storeFile file("../keystore.jks")
            storePassword storePasswordString
            keyAlias keyAliasString
            keyPassword keyPasswordString
        }
    }
    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-DEBUG'
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    flavorDimensions "version"
    productFlavors {
        develop {
            applicationId = "io.benedictp.myblueprint.develop"
        }
        staging {
            applicationId = "io.benedictp.myblueprint.staging"
        }
        production {
            applicationId = "io.benedictp.myblueprint"
        }
    }
    applicationVariants.all { variant ->
        def appName = variant.mergedFlavor.resValues.get('app_name').getValue()
        def productFlavor = variant.productFlavors.get(0).name
        def buildType = variant.buildType.name
        //change appName for better distinction but not the final build for the store
        if (productFlavor == "production" && buildType == "release") {
            variant.resValue "string", "generated_app_name", '"' + appName + '"'
        } else {
            variant.resValue "string", "generated_app_name", '"' + appName + ' ' + variant.productFlavors.get(0).name + ' ' + variant.buildType.name + '"'
        }

        variant.outputs.all { output ->
            def versionCode = variant.versionCode
            //change apk file name
            outputFileName = appName + '_' + productFlavor + '_' + buildType + '_' + versionCode + '.apk'
        }
    }
    compileOptions {
        coreLibraryDesugaringEnabled true  //to use some java 8+ features
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11.toString()
        freeCompilerArgs += '-Xopt-in=kotlin.RequiresOptIn'
        useIR = true
    }
    buildFeatures {
        compose true
        buildConfig = true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.0.0-beta03'
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/AL2.0'
        exclude 'META-INF/LGPL2.1'
        exclude("META-INF/*.kotlin_module")
    }
}

easylauncher {
    defaultFlavorNaming true
    variants {
        stagingRelease {
            enable true
            filters customRibbon(label: "staging", ribbonColor: "#FF0000", labelColor: "#000000", position: "bottom")
        }
        developRelease {
            enable true
            filters customRibbon(label: "develop", ribbonColor: "#FF0000", labelColor: "#000000", position: "bottom")
        }
    }
}

kapt {
    correctErrorTypes true
}

dependencies {
    implementation project(':domain')
    implementation project(':repository')
    implementation project(':localData')
    implementation project(':remoteData')

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$versions.coroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.coroutines"

    implementation "androidx.compose.ui:ui:$versions.jetpackCompose"
    implementation "androidx.compose.ui:ui-tooling:$versions.jetpackCompose"
    implementation "androidx.compose.foundation:foundation:$versions.jetpackCompose"
    implementation "androidx.compose.material:material:$versions.jetpackCompose"
    implementation "androidx.compose.material:material-icons-core:$versions.jetpackCompose"
    implementation "androidx.compose.material:material-icons-extended:$versions.jetpackCompose"
    implementation "androidx.compose.runtime:runtime-livedata:$versions.jetpackCompose"
    implementation "com.google.android.material:compose-theme-adapter:$versions.jetpackCompose"

    implementation "androidx.navigation:navigation-compose:$versions.navigationCompose"

    implementation "androidx.hilt:hilt-navigation-compose:$versions.hiltNavigationCompose"

    implementation 'com.puculek.pulltorefresh:pull-to-refresh-compose:1.0.5' //TODO remove when otherwise available

    implementation "com.google.android.material:material:$versions.material"

    implementation "androidx.core:core-ktx:$versions.androidXCore"
    implementation "androidx.fragment:fragment-ktx:$versions.androidXFragment"
    implementation "androidx.appcompat:appcompat:$versions.androidXAppCompat"
    implementation "androidx.constraintlayout:constraintlayout:$versions.androidXConstraintLayout"
    implementation "androidx.navigation:navigation-runtime-ktx:$versions.androidXNavigation"

    implementation "com.squareup.retrofit2:retrofit:$versions.retrofit2"
    implementation "com.squareup.retrofit2:converter-moshi:$versions.retrofit2"
    implementation "com.squareup.moshi:moshi:$versions.moshi"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$versions.moshi"
    implementation "com.squareup.okhttp3:logging-interceptor:$versions.okhttp3"

    implementation "com.google.dagger:hilt-android:$versions.daggerHiltAndroid"
    kapt "com.google.dagger:hilt-android-compiler:$versions.daggerHiltAndroid"

    implementation "com.squareup.sqldelight:android-driver:$versions.sqldelightVersion"

    implementation "com.github.bumptech.glide:glide:$versions.glide"
    kapt "com.github.bumptech.glide:compiler:$versions.glide"

    //to use some java 8+ features
    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:$versions.desugarJdkLibs"

    testImplementation "junit:junit:$versions.junit"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$versions.coroutines"
    testImplementation "io.mockk:mockk:$versions.mockk"
    testImplementation "androidx.arch.core:core-testing:$versions.coreTesting"

    androidTestImplementation "androidx.test.ext:junit:$versions.androidXJunit"
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$versions.jetpackCompose"
}